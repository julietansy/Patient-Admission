-- SQL queries on challenge questions hosted on https://www.sql-practice.com/


-- Update the patients table for the allergies column. If the patient's allergies is null then replace it with 'NKA'
UPDATE patients
SET allergies = 'NKA'
WHERE allergies IS NULL

-- Show first name and last name concatinated into one column to show their full name.
SELECT
  CONCAT(first_name, ' ', last_name) AS full_name
FROM patients;

-- Show first name, last name, and the full province name of each patient.
SELECT
  patients.first_name,
  patients.last_name,
  province_names.province_name
FROM patients
  JOIN province_names ON patients.province_id = province_names.province_id
  
-- Show how many patients have a birth_date with 2010 as the birth year.
SELECT 
	COUNT(patient_id) AS total_patients
FROM patients
WHERE year(birth_date) = 2010

-- Show unique birth years from patients and order them by ascending.
SELECT
  DISTINCT(YEAR(birth_date)) AS birth_year
FROM patients
ORDER BY YEAR(birth_date) ASC


-- Show unique first names from the patients table which only occurs once in the list.
SELECT 
	DISTINCT(first_name)
FROM patients
GROUP BY first_name
HAVING COUNT(first_name) = 1

-- Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long.
SELECT
  patient_id,
  first_name
FROM patients
WHERE first_name LIKE 's____%s'

-- Show patient_id, first_name, last_name from patients whos diagnosis is 'Dementia'.
SELECT
  p.patient_id,
  p.first_name,
  p.last_name
FROM patients p
  JOIN admissions a ON p.patient_id = a.patient_id
WHERE a.diagnosis = 'Dementia'

-- Display every patient's first_name. Order the list by the length of each name and then by alphbetically
SELECT first_name
FROM patients
ORDER BY  
	len(first_name),
    first_name
    
-- Show the total amount of male patients and the total amount of female patients in the patients table. Display the two results in the same row.
SELECT 
  SUM(Gender = 'M') as male, 
  SUM(Gender = 'F') AS female
FROM patients

-- Show first and last name, allergies from patients which have allergies to either 'Penicillin' or 'Morphine'. Show results ordered ascending by allergies then by first_name then by last_name.
SELECT
  first_name,
  last_name,
  allergies
FROM patients
WHERE
  allergies = 'Penicillin'
  OR allergies = 'Morphine'
ORDER BY
  allergies,
  first_name,
  last_name
  
-- Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.
SELECT
  patient_id,
  diagnosis
FROM admissions
GROUP BY
  patient_id,
  diagnosis
HAVING COUNT(patient_id) > 1

-- Show the city and the total number of patients in the city. Order from most to least patients and then by city name ascending.
SELECT
  city,
  COUNT(patient_id) AS total_patient
FROM patients
GROUP BY city
ORDER BY
  total_patient DESC,
  city
  
-- Show first name, last name and role of every person that is either patient or doctor. The roles are either "Patient" or "Doctor"
SELECT first_name, last_name, 'Patient' AS role from patients
	UNION ALL
SELECT first_name, last_name, 'Doctor' AS role FROM doctors

-- Show all allergies ordered by popularity. Remove NULL values from query.
SELECT
  allergies,
  COUNT(*) AS patient_count
FROM patients
WHERE allergies IS NOT NULL
GROUP BY allergies
ORDER BY patient_count DESC

-- Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date.
SELECT
  first_name,
  last_name,
  birth_date
FROM patients
WHERE
  YEAR(birth_date) between 1970 AND 1979
ORDER BY birth_date

-- We want to display each patient's full name in a single column. Their last_name in all upper letters must appear first, then first_name in all lower case letters. Separate the last_name and first_name with a comma. Order the list by the first_name in decending order
SELECT
  CONCAT(UPPER(last_name), ',', lower(first_name)) AS full_name
FROM patients
ORDER BY first_name DESC

-- Show the province_id(s), sum of height; where the total sum of its patient's height is greater than or equal to 7,000.
SELECT
  province_id,
  SUM(height) AS total_height
FROM patients
GROUP BY province_id
HAVING total_height >= 7000

-- Show the difference between the largest weight and smallest weight for patients with the last name 'Maroni'
SELECT
  MAX(weight) - MIN(weight) AS weight_diff
FROM patients
GROUP BY last_name
HAVING last_name = 'Maroni'

-- Show all of the days of the month (1-31) and how many admission_dates occurred on that day. Sort by the day with most admissions to least admissions.
SELECT
  DAY(admission_date),
  COUNT(*) AS admission_count
FROM admissions
GROUP BY DAY(admission_date)
ORDER BY admission_count DESC

-- Show all columns for patient_id 542's most recent admission_date.
SELECT *
FROM admissions
WHERE patient_id = 542
ORDER BY admission_date DESC
LIMIT 1

-- Show patient_id, attending_doctor_id, and diagnosis for admissions that match one of the two criteria:
-- 1. patient_id is an odd number and attending_doctor_id is either 1, 5, or 19.
-- 2. attending_doctor_id contains a 2 and the length of patient_id is 3 characters.
SELECT
  patient_id,
  attending_doctor_id,
  diagnosis
FROM admissions
WHERE
  (
    (patient_id % 2) != 0
    AND attending_doctor_id IN (1, 5, 19)
  )
  OR (
    attending_doctor_id LIKE '%2%'
    AND len(patient_id) = 3
  )
  
  
-- Show first_name, last_name, and the total number of admissions attended for each doctor.
SELECT
  d.first_name,
  d.last_name,
  COUNT(*) AS total_admission
FROM doctors d
  JOIN admissions a ON d.doctor_id = a.attending_doctor_id
GROUP BY a.attending_doctor_id

-- For each doctor, display their id, full name, and the first and last admission date they attended.
SELECT
  d.doctor_id,
  CONCAT(d.first_name, " ", d.last_name) AS full_name,
  MIN(a.admission_date) AS first_admission_date,
  MAX(a.admission_date) AS last_admission_date
FROM
  doctors d,
  admissions a
WHERE
  d.doctor_id = a.attending_doctor_id
GROUP BY d.doctor_id

-- Display the total amount of patients for each province. Order by descending.
SELECT
  pr.province_name,
  COUNT(p.patient_id) AS total_patient
FROM province_names pr
  JOIN patients p ON pr.province_id = p.province_id
GROUP BY pr.province_name
ORDER BY total_patient DESC

-- For every admission, display the patient's full name, their admission diagnosis, and their doctor's full name who diagnosed their problem.
SELECT
  (p.first_name || " " || p.last_name) AS patient_name,
  a.diagnosis,
  (d.first_name || " " || d.last_name) AS doctor_name
FROM patients p
  JOIN admissions a 
	ON p.patient_id = a.patient_id
  JOIN doctors d 
	ON a.attending_doctor_id = d.doctor_id

-- display the number of duplicate patients based on their first_name and last_name.
SELECT
  first_name,
  last_name,
  count(patient_id) AS count_duplicate
FROM patients
GROUP BY
  first_name,
  last_name
HAVING COUNT(*) > 1

-- Display patient's full name, height in the units feet rounded to 1 decimal, weight in the unit pounds rounded to 0 decimals, birth_date, gender non abbreviated.
-- Convert CM to feet by dividing by 30.48.
-- Convert KG to pounds by multiplying by 2.205.
SELECT
  (first_name || " " || last_name) AS full_name,
  ROUND((height / 30.48), 1) AS height_feet,
  ROUND((weight * 2.205), 0) AS weight_pounds,
  birth_date,
  CASE
    WHEN gender = 'M' THEN 'MALE'
    ELSE 'FEMALE'
  END AS gender
FROM patients

-- Show patient_id, first_name, last_name from patients whose does not have any records in the admissions table. (Their patient_id does not exist in any admissions.patient_id rows.)
SELECT
  patient_id,
  first_name,
  last_name
FROM patients
WHERE patient_id
	NOT IN (
    SELECT DISTINCT patient_id
    FROM admissions
  	)

-- Show all of the patients grouped into weight groups.
-- Show the total amount of patients in each weight group.
-- Order the list by the weight group decending.
SELECT
  COUNT(*) AS patient_count,
  CASE
    WHEN weight BETWEEN 0 AND 9 THEN '0'
    WHEN weight BETWEEN 10 AND 19 THEN '10'
    WHEN weight BETWEEN 20 AND 29 THEN '20'
    WHEN weight BETWEEN 30 AND 39 THEN '30'
    WHEN weight BETWEEN 40 AND 49 THEN '40'
    WHEN weight BETWEEN 50 AND 59 THEN '50'
    WHEN weight BETWEEN 60 AND 69 THEN '60'
    WHEN weight BETWEEN 70 AND 79 THEN '70'
    WHEN weight BETWEEN 80 AND 89 THEN '80'
    WHEN weight BETWEEN 90 AND 99 THEN '90'
    WHEN weight BETWEEN 100 AND 109 THEN '100'
    WHEN weight BETWEEN 110 AND 119 THEN '110'
    WHEN weight BETWEEN 120 AND 129 THEN '120'
    WHEN weight BETWEEN 130 AND 139 THEN '130'
    WHEN weight BETWEEN 140 AND 149 THEN '140'
  END AS weight_group,
FROM patients
GROUP BY weight_group
ORDER BY weight DESC

-- Show patient_id, weight, height, isObese from the patients table.
-- Display isObese as a boolean 0 or 1.
-- Obese is defined as weight(kg)/(height(m)2) >= 30.

SELECT
  patient_id,
  weight,
  height,
  (CASE
      WHEN weight / (POWER(height / 100, 2)) >= 30 THEN 1
      ELSE 0
    END
  ) AS isObese
FROM patients

-- Show patient_id, first_name, last_name, and attending doctor's specialty.
-- Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'
SELECT
  p.patient_id,
  p.first_name AS patient_first_name,
  p.last_name AS patient_last_name,
  d.specialty AS attending_doctor_specialty
FROM patients p
  JOIN admissions a ON p.patient_id = a.patient_id
  JOIN doctors d ON a.attending_doctor_id = d.doctor_id
WHERE
  a.diagnosis = 'Epilepsy'
  AND d.first_name = 'Lisa'
  
-- All patients who have gone through admissions, can see their medical documents on our site. Those patients are given a temporary password after their first admission. Show the patient_id and temp_password.
-- The password must be the following, in order:
-- 1. patient_id
-- 2. the numerical length of patient's last_name
-- 3. year of patient's birth_date

SELECT
  patient_id,
  CONCAT(
    patient_id,
    len(last_name),
    YEAR(birth_date)
  ) AS temp_password
FROM patients
WHERE patient_id IN (
    SELECT DISTINCT patient_id
    FROM admissions
  )

-- Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance.
-- Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.
WITH admission_cost AS (
    SELECT
      patient_id,
      CASE
        WHEN patient_id % 2 = 0 THEN 'YES'
        ELSE 'NO'
      END AS has_insurance,
      CASE
        WHEN patient_id % 2 = 0 THEN 10
        ELSE 50
      END AS admission_total
    FROM admissions
  )
SELECT
  has_insurance,
  SUM(admission_total)
FROM admission_cost
GROUP BY has_insurance

-- Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name
WITH gender_count AS (
    SELECT
      province_id,
      SUM(
        CASE
          WHEN gender = 'M' THEN 1
        END
      ) AS male_count,
      SUM(
        CASE
          WHEN gender = 'F' THEN 1
        END
      ) AS female_count
    FROM patients
    GROUP BY province_id
  )
SELECT
  CASE
    WHEN male_count > female_count THEN province_name
    ELSE NULL
  END AS full_province_name
FROM gender_count g
  JOIN province_names pr ON g.province_id = pr.province_id
WHERE full_province_name IS NOT NULL


-- We are looking for a specific patient. Pull all columns for the patient who matches the following criteria:
-- First_name contains an 'r' after the first two letters.
-- Identifies their gender as 'F'
-- Born in February, May, or December
-- Their weight would be between 60kg and 80kg
-- Their patient_id is an odd number
-- They are from the city 'Kingston'
SELECT *
FROM patients
WHERE
  first_name LIKE '__r%'
  AND gender = 'F'
  AND MONTH(birth_date) IN (02, 05, 12)
  AND weight BETWEEN 60 AND 80
  AND patient_id % 2 != 0
  AND city = 'Kingston'

-- Show the percent of patients that have 'M' as their gender. Round the answer to the nearest hundreth number and in percent form.
SELECT
  CONCAT(
    ROUND(
      (SUM(gender = 'M') / CAST(count(*) AS FLOAT)) * 100,
      
    2),
    "%"
  ) AS male_percentage
FROM patients

-- For each day display the total amount of admissions on that day. Display the amount changed from the previous date.
SELECT
  admission_date,
  COUNT(*) AS total_admissions,
  COUNT(*) - LAG(COUNT(*), 1) OVER (ORDER BY admission_date) AS admission_count_changed
FROM admissions
GROUP BY admission_date
ORDER BY admission_date;


-- Sort the province names in ascending order in such a way that the province 'Ontario' is always on top.
SELECT province_name
FROM province_names
ORDER BY (CASE WHEN province_name = 'Ontario' THEN 0 ELSE 1 END), province_name ASC

-- We need a breakdown for the total amount of admissions each doctor has started each year. Show the doctor_id, doctor_full_name, specialty, year, total_admissions for that year.
SELECT d.doctor_id, CONCAT(d.first_name, ' ', d.last_name) AS doctor_full_name, d.specialty, YEAR(a.admission_date) AS Year, COUNT(*) AS total_admissions
FROM doctors d JOIN admissions a 
ON d.doctor_id = a.attending_doctor_id
GROUP BY d.doctor_id, YEAR(a.admission_date)